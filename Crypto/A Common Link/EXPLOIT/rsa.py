from Crypto.Util.number import getPrime, GCD, inverse
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

def primeGen():
    p = getPrime(512)
    # p = 11375644501829186232948320193344739700529639721127966075031438184853938181355398218448252161262130813264820431940544615280451562048779932623290806529898499
    q = getPrime(512)
    n = p * q
    phi = (p-1)*(q-1)
    e = 6553590
    while (GCD(e,phi)!=1):
        e += 1
    
    d = inverse(e,phi)

    print(f"p :- {p}")
    print(f"q :- {q}")
    print(f"e :- {e}")
    print(f"d :- {d}")
    print(f"n :- {n}")

    key = RSA.construct((n, e, d), consistency_check=True)
    public_key = key.publickey()
    with open ("pub5.pem", "wb") as file:
        file.write(public_key.exportKey('PEM'))
        file.close()

# primeGen()
def encrypt_private_key(a_message, private_key):
    encryptor = PKCS1_OAEP.new(private_key)
    encrypted_msg = encryptor.encrypt(a_message)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
    return encoded_encrypted_msg


def decrypt_public_key(encoded_encrypted_msg, public_key):
    encryptor = PKCS1_OAEP.new(public_key)
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decoded_decrypted_msg = encryptor.decrypt(decoded_encrypted_msg)
    return decoded_decrypted_msg


public_key = RSA.importKey(open("pub5.pem", "rb").read(), passphrase=None)
flag = b"dctf{3v3ry_s3cr3t_cr34t3s_4_p0t3nt14l_f41lur3}"
cipher = encrypt_private_key(flag, public_key).decode()
# print(f"m5 : {cipher}")
