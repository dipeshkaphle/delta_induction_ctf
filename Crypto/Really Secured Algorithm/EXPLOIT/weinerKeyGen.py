import random
import miller_rabin
from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCD
from Crypto.Util import number


def getPrimePair(bits=512):
    assert bits % 4 == 0

    p = getPrime(512)
    q = getPrime(512)
    while True:
        if q > p and q < 2 * p:
            break

    return p, q


def generateKeys(nbits=1024):
    assert nbits % 4 == 0

    p = getPrime(512)
    q = getPrime(512)
    while True:
        if q > p and q < 2 * p:
            break
    print("p: ", p)
    print("q: ", q)
    n = p * q
    phi = (p - 1) * (q - 1)

    # generate a d such that:
    #     (d,n) = 1
    #    36d^4 < n
    good_d = False
    while not good_d:
        d = random.getrandbits(nbits // 4)
        if GCD(d, phi) == 1 and 36 * pow(d, 4) < n:
            good_d = True

    e = inverse(d, phi)
    return e, n, d


for i in range(5):
    e, n, d = generateKeys()
    print("-----------------------")
    print("e =")
    print(e)
    print("n =")
    print(n)
    print("d =")
    print(d)
    print("-----------------------")
"""
p:  10530231631729892090401800622738177044462177325802624716164824350973472412054798752934225704771081609201193456623741356397594676916248418875982527393895609
q:  12669619685411686471726494374312399625011089100418557216089714385428929790652539802610311992733289310077499368803201957082506468917848802470298712579364859
-----------------------
e =
104316533694123640114903421471893737290446391902652049352172374375008563400725654938325725928664778705327214227122425974778924217224971325686630885727109808554358260973883815434511696304308244195865493736166370525905241473602330599846953832086479024761945278194500033104990066906669343041833179642233614397769
n =
133414029973309865338410057669855443658290139287573327499447577542345220303383898762308587476729025024615423019040915400431957072646780471372763430041679723767546976922389905420092468094749445277883318522095615415969716541445031302737717606686973247718369960713952420734085000862169212620795045183574969004131
d =
6429882514140050059808270633007412442673518082746409787450067970321870017113
"""
