# import owiener

e = 104316533694123640114903421471893737290446391902652049352172374375008563400725654938325725928664778705327214227122425974778924217224971325686630885727109808554358260973883815434511696304308244195865493736166370525905241473602330599846953832086479024761945278194500033104990066906669343041833179642233614397769
n = 133414029973309865338410057669855443658290139287573327499447577542345220303383898762308587476729025024615423019040915400431957072646780471372763430041679723767546976922389905420092468094749445277883318522095615415969716541445031302737717606686973247718369960713952420734085000862169212620795045183574969004131
d = 6429882514140050059808270633007412442673518082746409787450067970321870017113
# d = owiener.attack(e, n)
# if d is None:
#     print("Failed")
# else:
#     print("Hacked d={}".format(d))

# from Crypto.PublicKey import RSA

# key = RSA.construct((n, e, d), consistency_check=True)
# private_key = key.export_key()
# print(private_key)
# file_out = open("private.pem", "wb")
# file_out.write(private_key)
# file_out.close()

# public_key = key.publickey().export_key()
# file_out = open("receiver.pem", "wb")
# file_out.write(public_key)
# file_out.close()

# rsa_key = RSA.importKey(open("private.pem", "rb").read(), passphrase=None)
# print(rsa_key.n)
# print(rsa_key.e)
# print(rsa_key.d)

from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64


def encrypt_private_key(a_message, private_key):
    encryptor = PKCS1_OAEP.new(private_key)
    encrypted_msg = encryptor.encrypt(a_message)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
    return encoded_encrypted_msg


def decrypt_public_key(encoded_encrypted_msg, public_key):
    encryptor = PKCS1_OAEP.new(public_key)
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decoded_decrypted_msg = encryptor.decrypt(decoded_encrypted_msg)
    return decoded_decrypted_msg


public_key = RSA.importKey(open("public.pem", "rb").read(), passphrase=None)
private_key = RSA.importKey(open("private.pem", "rb").read(), passphrase=None)
print(type(private_key))
flag = b"dctf{1ts_w31n3r_c4us3_th3_d_1s_sm4ll}"

encoded = encrypt_private_key(flag, public_key).decode()
decoded = decrypt_public_key(encoded, private_key)
print(encoded)
print(decoded)
